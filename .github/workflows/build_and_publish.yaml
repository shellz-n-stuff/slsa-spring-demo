name: Build and sign image
on:
  push:
    branches:
      - main

jobs:
  build-image:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    name: build-image
    env:
      IMAGE_NAME: ghcr.io/shellz-n-stuff/slsa-spring-demo
      IMAGE_TAG: ${{ github.sha }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set up Cosign
      uses: sigstore/cosign-installer@v3.5.0

    - name: Set up Java 17
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'
        cache: 'gradle'
      
    - name: Install Syft
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build with Gradle and Jib
      run: ./gradlew build jibDockerBuild --image=${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

    - name: Push Docker Image to GHCR
      run: |
        docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
    
    - name: Get Image Digest
      id: image-digest
      run: |
        DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }})
        echo "DIGEST=${DIGEST}" >> $GITHUB_ENV
    
    # SBOM generation and signing
    - name: Generate SBOM
      run: syft ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} -o json > sbom.json

    - name: Attach SBOM to Docker Image and Submit a signature for the SBOM
      env:
        COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
      run: |
        ATTACHED_SSBOM=$(cosign attach sbom --sbom sbom.json ${{ env.DIGEST }})
        echo "${ATTACHED_SSBOM}"
        cosign sign --yes --key <(echo "${{ secrets.COSIGN_PRIVATE_KEY }}") ${ATTACHED_SSBOM}


    # Scan Image then Sign if Okay
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.23.0
      with:
        image-ref: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      
    - name: Sign Docker Image with Cosign
      env:
        COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
      run: |
         cosign sign --yes --key <(echo "${{ secrets.COSIGN_PRIVATE_KEY }}") ${{ env.DIGEST }}